import {
  ValidationError
} from "./chunk-IQAEAI4P.js";

// src/loaders/adapter.ts
import { fileURLToPath } from "url";
import fs from "fs/promises";
import { parse } from "querystring";
import path from "path";
function toNode(loader, filterByPath) {
  return async (url, _context, nextLoad) => {
    if (!url.startsWith("file:///")) return nextLoad(url);
    const parsedUrl = new URL(url);
    const filePath = fileURLToPath(parsedUrl);
    if (filterByPath(filePath)) {
      const source = (await fs.readFile(filePath)).toString();
      const result = await loader({
        filePath,
        query: Object.fromEntries(parsedUrl.searchParams.entries()),
        source,
        development: false,
        compiler: {
          addDependency() {
          }
        }
      });
      return {
        source: result.code,
        format: "module",
        shortCircuit: true
      };
    }
    return nextLoad(url);
  };
}
function toVite(loader) {
  return async function(file, query, value) {
    const result = await loader({
      filePath: file,
      query: parse(query),
      source: value,
      development: this.environment.mode === "dev",
      compiler: {
        addDependency: (file2) => {
          this.addWatchFile(file2);
        }
      }
    });
    return {
      code: result.code,
      map: result.map
    };
  };
}
function toWebpack(loader) {
  return async function(source, callback) {
    try {
      const result = await loader({
        filePath: this.resourcePath,
        query: parse(this.resourceQuery.slice(1)),
        source,
        development: this.mode === "development",
        compiler: this
      });
      callback(void 0, result.code, result.map);
    } catch (error) {
      if (error instanceof ValidationError) {
        return callback(new Error(error.toStringFormatted()));
      }
      if (!(error instanceof Error)) throw error;
      const fpath = path.relative(this.context, this.resourcePath);
      error.message = `${fpath}:${error.name}: ${error.message}`;
      callback(error);
    }
  };
}

export {
  toNode,
  toVite,
  toWebpack
};
