import {
  remarkInclude
} from "./chunk-LMG6UWCL.js";

// src/loaders/mdx/build-mdx.ts
import { createProcessor } from "@mdx-js/mdx";

// src/loaders/mdx/remark-postprocess.ts
import { visit } from "unist-util-visit";
import { toMarkdown } from "mdast-util-to-markdown";
import { valueToEstree } from "estree-util-value-to-estree";
function remarkPostprocess({
  includeProcessedMarkdown = false,
  valueToExport = []
} = {}) {
  return (tree, file) => {
    let title;
    const urls = [];
    visit(tree, ["heading", "link"], (node) => {
      if (node.type === "heading" && node.depth === 1) {
        title = flattenNode(node);
      }
      if (node.type !== "link") return;
      urls.push({
        href: node.url
      });
      return "skip";
    });
    if (title) {
      file.data.frontmatter ??= {};
      if (!file.data.frontmatter.title) file.data.frontmatter.title = title;
    }
    file.data.extractedReferences = urls;
    if (includeProcessedMarkdown) {
      file.data._markdown = toMarkdown(tree, {
        ...this.data("settings"),
        // from https://github.com/remarkjs/remark/blob/main/packages/remark-stringify/lib/index.js
        extensions: this.data("toMarkdownExtensions") || []
      });
    }
    for (const { name, value } of file.data["mdx-export"] ?? []) {
      tree.children.unshift(getMdastExport(name, value));
    }
    for (const name of valueToExport) {
      if (!(name in file.data)) continue;
      tree.children.unshift(getMdastExport(name, file.data[name]));
    }
  };
}
function getMdastExport(name, value) {
  return {
    type: "mdxjsEsm",
    value: "",
    data: {
      estree: {
        type: "Program",
        sourceType: "module",
        body: [
          {
            type: "ExportNamedDeclaration",
            attributes: [],
            specifiers: [],
            source: null,
            declaration: {
              type: "VariableDeclaration",
              kind: "let",
              declarations: [
                {
                  type: "VariableDeclarator",
                  id: {
                    type: "Identifier",
                    name
                  },
                  init: valueToEstree(value)
                }
              ]
            }
          }
        ]
      }
    }
  };
}
function flattenNode(node) {
  if ("children" in node)
    return node.children.map((child) => flattenNode(child)).join("");
  if ("value" in node) return node.value;
  return "";
}

// src/loaders/mdx/build-mdx.ts
var cache = /* @__PURE__ */ new Map();
async function buildMDX(cacheKey, source, options) {
  const { filePath, frontmatter, data, _compiler, ...rest } = options;
  function getProcessor(format) {
    const key = `${cacheKey}:${format}`;
    let processor = cache.get(key);
    if (!processor) {
      processor = createProcessor({
        outputFormat: "program",
        ...rest,
        remarkPlugins: [
          remarkInclude,
          ...rest.remarkPlugins ?? [],
          [
            remarkPostprocess,
            {
              ...options.postprocess,
              valueToExport: [
                ...options.postprocess?.valueToExport ?? [],
                "structuredData",
                "extractedReferences",
                "frontmatter",
                "lastModified",
                "_markdown"
              ]
            }
          ]
        ],
        format
      });
      cache.set(key, processor);
    }
    return processor;
  }
  return getProcessor(
    options.format ?? (filePath.endsWith(".mdx") ? "mdx" : "md")
  ).process({
    value: source,
    path: filePath,
    data: {
      ...data,
      frontmatter,
      _compiler,
      _getProcessor: getProcessor
    }
  });
}

export {
  buildMDX
};
