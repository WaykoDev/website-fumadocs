import {
  missingProcessedMarkdown
} from "./chunk-ZLCSVXCD.js";

// src/runtime/next/index.ts
import * as fs from "fs/promises";
var _runtime = {
  doc(files) {
    return files.map((file) => {
      const data = file.data;
      const filePath = file.info.fullPath;
      return {
        info: file.info,
        _exports: data,
        body: data.default,
        lastModified: data.lastModified,
        toc: data.toc,
        structuredData: data.structuredData,
        extractedReferences: data.extractedReferences,
        ...data.frontmatter,
        async getText(type) {
          if (type === "raw") {
            return (await fs.readFile(filePath)).toString();
          }
          if (typeof data._markdown !== "string") missingProcessedMarkdown();
          return data._markdown;
        }
      };
    });
  },
  meta(files) {
    return files.map((file) => {
      return {
        info: file.info,
        ...file.data
      };
    });
  },
  docs(docs, metas) {
    const parsedDocs = this.doc(docs);
    const parsedMetas = this.meta(metas);
    return {
      docs: parsedDocs,
      meta: parsedMetas,
      toFumadocsSource() {
        return createMDXSource(parsedDocs, parsedMetas);
      }
    };
  }
};
function createMDXSource(docs, meta = []) {
  return {
    files: resolveFiles({
      docs,
      meta
    })
  };
}
function resolveFiles({ docs, meta }) {
  const outputs = [];
  for (const entry of docs) {
    outputs.push({
      type: "page",
      absolutePath: entry.info.fullPath,
      path: entry.info.path,
      data: entry
    });
  }
  for (const entry of meta) {
    outputs.push({
      type: "meta",
      absolutePath: entry.info.fullPath,
      path: entry.info.path,
      data: entry
    });
  }
  return outputs;
}

export {
  _runtime,
  createMDXSource,
  resolveFiles
};
