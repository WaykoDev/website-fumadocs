#!/usr/bin/env node
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// src/loaders/mdx/preset.ts
var preset_exports = {};
__export(preset_exports, {
  getDefaultMDXOptions: () => getDefaultMDXOptions
});
function pluginOption(def, options = []) {
  const list = def(Array.isArray(options) ? options : []).filter(
    Boolean
  );
  if (typeof options === "function") {
    return options(list);
  }
  return list;
}
function getDefaultMDXOptions({
  valueToExport = [],
  rehypeCodeOptions,
  remarkImageOptions,
  remarkHeadingOptions,
  remarkStructureOptions,
  remarkCodeTabOptions,
  remarkNpmOptions,
  _withoutBundler = false,
  ...mdxOptions
}) {
  const remarkPlugins = pluginOption(
    (v) => [
      plugins.remarkGfm,
      [
        plugins.remarkHeading,
        {
          generateToc: false,
          ...remarkHeadingOptions
        }
      ],
      remarkImageOptions !== false && [
        plugins.remarkImage,
        {
          ...remarkImageOptions,
          useImport: _withoutBundler ? false : remarkImageOptions?.useImport
        }
      ],
      "remarkCodeTab" in plugins && remarkCodeTabOptions !== false && [
        plugins.remarkCodeTab,
        remarkCodeTabOptions
      ],
      "remarkNpm" in plugins && remarkNpmOptions !== false && [plugins.remarkNpm, remarkNpmOptions],
      ...v,
      remarkStructureOptions !== false && [
        plugins.remarkStructure,
        remarkStructureOptions
      ],
      () => {
        return (_, file) => {
          file.data["mdx-export"] ??= [];
          for (const name of valueToExport) {
            if (name in file.data)
              file.data["mdx-export"].push({ name, value: file.data[name] });
          }
        };
      }
    ],
    mdxOptions.remarkPlugins
  );
  const rehypePlugins = pluginOption(
    (v) => [
      rehypeCodeOptions !== false && [plugins.rehypeCode, rehypeCodeOptions],
      ...v,
      plugins.rehypeToc
    ],
    mdxOptions.rehypePlugins
  );
  return {
    ...mdxOptions,
    outputFormat: _withoutBundler ? "function-body" : mdxOptions.outputFormat,
    remarkPlugins,
    rehypePlugins
  };
}
var plugins;
var init_preset = __esm({
  "src/loaders/mdx/preset.ts"() {
    "use strict";
    plugins = __toESM(require("fumadocs-core/mdx-plugins"), 1);
  }
});

// src/config/build.ts
function buildConfig(config) {
  const collections = /* @__PURE__ */ new Map();
  let globalConfig = {};
  for (const [k, v] of Object.entries(config)) {
    if (!v) {
      continue;
    }
    if (typeof v === "object" && "type" in v) {
      if (v.type === "docs") {
        collections.set(k, v);
        continue;
      }
      if (v.type === "doc" || v.type === "meta") {
        collections.set(k, v);
        continue;
      }
    }
    if (k === "default" && v) {
      globalConfig = v;
      continue;
    }
    throw new Error(
      `Unknown export "${k}", you can only export collections from source configuration file.`
    );
  }
  const mdxOptionsCache = /* @__PURE__ */ new Map();
  return {
    global: globalConfig,
    collections,
    async getDefaultMDXOptions(mode = "default") {
      const cached = mdxOptionsCache.get(mode);
      if (cached) return cached;
      const input = this.global.mdxOptions;
      async function uncached() {
        const options = typeof input === "function" ? await input() : input;
        const { getDefaultMDXOptions: getDefaultMDXOptions2 } = await Promise.resolve().then(() => (init_preset(), preset_exports));
        if (options?.preset === "minimal") return options;
        return getDefaultMDXOptions2({
          ...options,
          _withoutBundler: mode === "remote"
        });
      }
      const result = uncached();
      mdxOptionsCache.set(mode, result);
      return result;
    }
  };
}
var init_build = __esm({
  "src/config/build.ts"() {
    "use strict";
  }
});

// src/loaders/config/load.ts
async function compileConfig(configPath, outDir) {
  const { build } = await import("esbuild");
  const transformed = await build({
    entryPoints: [{ in: configPath, out: "source.config" }],
    bundle: true,
    outdir: outDir,
    target: "node20",
    write: true,
    platform: "node",
    format: "esm",
    packages: "external",
    outExtension: {
      ".js": ".mjs"
    },
    allowOverwrite: true
  });
  if (transformed.errors.length > 0) {
    throw new Error("failed to compile configuration file");
  }
}
async function loadConfig(configPath, outDir, hash, build = false) {
  if (cache && cache.hash === hash) {
    return await cache.config;
  }
  if (build) await compileConfig(configPath, outDir);
  const url = (0, import_node_url.pathToFileURL)(path.resolve(outDir, "source.config.mjs"));
  const config = import(`${url.href}?hash=${hash}`).then((loaded) => {
    return buildConfig(
      // every call to `loadConfig` will cause the previous cache to be ignored
      loaded
    );
  });
  if (hash) cache = { config, hash };
  return await config;
}
async function getConfigHash(configPath) {
  const stats = await fs.stat(configPath).catch(() => void 0);
  if (stats) {
    return stats.mtime.getTime().toString();
  }
  throw new Error("Cannot find config file");
}
var fs, path, import_node_url, cache;
var init_load = __esm({
  "src/loaders/config/load.ts"() {
    "use strict";
    fs = __toESM(require("fs/promises"), 1);
    path = __toESM(require("path"), 1);
    import_node_url = require("url");
    init_build();
    cache = null;
  }
});

// src/utils/validation.ts
async function validate(schema, data, context, errorMessage) {
  if (typeof schema === "function" && !("~standard" in schema)) {
    schema = schema(context);
  }
  if ("~standard" in schema) {
    const result = await schema["~standard"].validate(
      data
    );
    if (result.issues) {
      throw new ValidationError(errorMessage, result.issues);
    }
    return result.value;
  }
  return data;
}
var import_picocolors, ValidationError;
var init_validation = __esm({
  "src/utils/validation.ts"() {
    "use strict";
    import_picocolors = __toESM(require("picocolors"), 1);
    ValidationError = class extends Error {
      constructor(message, issues) {
        super(
          `${message}:
${issues.map((issue) => `  ${issue.path}: ${issue.message}`).join("\n")}`
        );
        this.title = message;
        this.issues = issues;
      }
      toStringFormatted() {
        return [
          import_picocolors.default.bold(`[MDX] ${this.title}:`),
          ...this.issues.map(
            (issue) => import_picocolors.default.redBright(
              `- ${import_picocolors.default.bold(issue.path?.join(".") ?? "*")}: ${issue.message}`
            )
          )
        ].join("\n");
      }
    };
  }
});

// src/next/map/file-cache.ts
function toFullPath(file) {
  if (import_node_path.default.isAbsolute(file)) {
    return import_node_path.default.relative(process.cwd(), file);
  }
  return file;
}
async function readFileWithCache(file) {
  const fullPath = toFullPath(file);
  const cached = map.get(fullPath);
  if (cached) return cached;
  const read = import_promises.default.readFile(fullPath).then((s) => s.toString());
  map.set(fullPath, read);
  return read;
}
function removeFileCache(file) {
  map.delete(toFullPath(file));
}
var import_lru_cache, import_promises, import_node_path, map;
var init_file_cache = __esm({
  "src/next/map/file-cache.ts"() {
    "use strict";
    import_lru_cache = require("lru-cache");
    import_promises = __toESM(require("fs/promises"), 1);
    import_node_path = __toESM(require("path"), 1);
    map = new import_lru_cache.LRUCache({
      max: 100
    });
  }
});

// src/utils/git-timestamp.ts
async function getGitTimestamp(file) {
  const cached = cache2.get(file);
  if (cached) return cached;
  try {
    const out = await (0, import_tinyexec.x)(
      "git",
      ["log", "-1", '--pretty="%ai"', import_node_path2.default.relative(process.cwd(), file)],
      {
        throwOnError: true
      }
    );
    const time = new Date(out.stdout);
    cache2.set(file, time);
    return time;
  } catch {
    return;
  }
}
var import_node_path2, import_tinyexec, cache2;
var init_git_timestamp = __esm({
  "src/utils/git-timestamp.ts"() {
    "use strict";
    import_node_path2 = __toESM(require("path"), 1);
    import_tinyexec = require("tinyexec");
    cache2 = /* @__PURE__ */ new Map();
  }
});

// src/utils/fuma-matter.ts
function fumaMatter(input) {
  const output = { matter: "", data: {}, content: input };
  const match = regex.exec(input);
  if (!match) {
    return output;
  }
  output.matter = match[0];
  output.content = input.slice(match[0].length);
  const loaded = (0, import_js_yaml.load)(match[1]);
  output.data = loaded ?? {};
  return output;
}
var import_js_yaml, regex;
var init_fuma_matter = __esm({
  "src/utils/fuma-matter.ts"() {
    "use strict";
    import_js_yaml = require("js-yaml");
    regex = /^---\r?\n(.+?)\r?\n---\r?\n/s;
  }
});

// src/utils/import-formatter.ts
function getImportCode(info) {
  const specifier = JSON.stringify(info.specifier);
  if (info.type === "default") return `import ${info.name} from ${specifier}`;
  if (info.type === "namespace")
    return `import * as ${info.name} from ${specifier}`;
  if (info.type === "named") {
    const names = info.names.map(
      (name) => Array.isArray(name) ? `${name[0]} as ${name[1]}` : name
    );
    return `import { ${names.join(", ")} } from ${specifier}`;
  }
  return `import ${specifier}`;
}
function toImportPath(file, config) {
  const ext = import_node_path3.default.extname(file);
  let filename;
  if (ext === ".ts" && config.jsExtension) {
    filename = file.substring(0, file.length - ext.length) + ".js";
  } else if (ext === ".ts") {
    filename = file.substring(0, file.length - ext.length);
  } else {
    filename = file;
  }
  let importPath;
  if ("relativeTo" in config) {
    importPath = import_node_path3.default.relative(config.relativeTo, filename);
    if (!import_node_path3.default.isAbsolute(importPath) && !importPath.startsWith(".")) {
      importPath = `./${importPath}`;
    }
  } else {
    importPath = import_node_path3.default.resolve(filename);
  }
  return importPath.replaceAll(import_node_path3.default.sep, "/");
}
function ident(code, tab = 1) {
  return code.split("\n").map((v) => "  ".repeat(tab) + v).join("\n");
}
var import_node_path3;
var init_import_formatter = __esm({
  "src/utils/import-formatter.ts"() {
    "use strict";
    import_node_path3 = __toESM(require("path"), 1);
  }
});

// src/utils/collections.ts
function getSupportedFormats(collection) {
  return {
    doc: ["mdx", "md"],
    meta: ["json", "yaml"]
  }[collection.type];
}
function getGlobPatterns(collection) {
  if (collection.files) return collection.files;
  return [`**/*.{${getSupportedFormats(collection).join(",")}}`];
}
function isFileSupported(filePath, collection) {
  for (const format of getSupportedFormats(collection)) {
    if (filePath.endsWith(`.${format}`)) return true;
  }
  return false;
}
var init_collections = __esm({
  "src/utils/collections.ts"() {
    "use strict";
  }
});

// src/next/map/generate.ts
async function generateJS(configPath, config, importPath, configHash = false) {
  let asyncInit = false;
  const lines = [
    getImportCode({
      type: "named",
      names: ["_runtime"],
      specifier: "fumadocs-mdx/runtime/next"
    }),
    getImportCode({
      type: "namespace",
      specifier: toImportPath(configPath, importPath),
      name: "_source"
    })
  ];
  const entries = Array.from(config.collections.entries());
  async function getDocEntries(collectionName, files) {
    const items = files.map(async (file, i) => {
      const importId = `${collectionName}_${i}`;
      const params = [`collection=${collectionName}`];
      if (configHash) {
        params.push(`hash=${configHash}`);
      }
      lines.unshift(
        getImportCode({
          type: "namespace",
          name: importId,
          specifier: `${toImportPath(file.fullPath, importPath)}?${params.join("&")}`
        })
      );
      return `{ info: ${JSON.stringify(file)}, data: ${importId} }`;
    });
    return Promise.all(items);
  }
  async function getMetaEntries(collection, files) {
    const items = files.map(async (file) => {
      const source = await readFileWithCache(file.fullPath).catch(() => "");
      let data = source.length === 0 ? {} : parseMetaEntry(file.fullPath, source);
      if (collection?.schema) {
        data = await validate(
          collection.schema,
          data,
          {
            source,
            path: file.fullPath
          },
          `invalid data in ${file.fullPath}`
        );
      }
      return JSON.stringify({
        info: file,
        data
      });
    });
    return Promise.all(items);
  }
  async function getAsyncEntries(collection, files) {
    if (!asyncInit) {
      lines.unshift(
        getImportCode({
          type: "named",
          specifier: "fumadocs-mdx/runtime/async",
          names: ["_runtimeAsync", "buildConfig"]
        }),
        "const _sourceConfig = buildConfig(_source)",
        getImportCode({
          type: "default",
          name: "path",
          specifier: "node:path"
        })
      );
      asyncInit = true;
    }
    const entries2 = files.map(async (file) => {
      const content = await readFileWithCache(file.fullPath).catch(() => "");
      const parsed = fumaMatter(content);
      let data = parsed.data;
      if (collection.schema) {
        data = await validate(
          collection.schema,
          parsed.data,
          { path: file.fullPath, source: parsed.content },
          `invalid frontmatter in ${file.fullPath}`
        );
      }
      let lastModified;
      if (config.global?.lastModifiedTime === "git") {
        lastModified = await getGitTimestamp(file.fullPath);
      }
      const hash = (0, import_node_crypto.createHash)("md5").update(content).digest("hex");
      const infoStr = [];
      for (const [k, v] of Object.entries({ ...file, hash })) {
        infoStr.push(`${k}: ${JSON.stringify(v)}`);
      }
      infoStr.push(
        `absolutePath: path.resolve(${JSON.stringify(file.fullPath)})`
      );
      return `{ info: { ${infoStr.join(", ")} }, lastModified: ${JSON.stringify(lastModified)}, data: ${JSON.stringify(data)} }`;
    });
    return Promise.all(entries2);
  }
  const declares = entries.map(async ([k, collection]) => {
    if (collection.type === "docs") {
      const docs2 = await getCollectionFiles(collection.docs);
      const metas = await getCollectionFiles(collection.meta);
      const metaEntries = (await getMetaEntries(collection.meta, metas)).join(
        ", "
      );
      if (collection.docs.async) {
        const docsEntries2 = (await getAsyncEntries(collection.docs, docs2)).join(
          ", "
        );
        return `export const ${k} = _runtimeAsync.docs<typeof _source.${k}>([${docsEntries2}], [${metaEntries}], "${k}", _sourceConfig)`;
      }
      const docsEntries = (await getDocEntries(k, docs2)).join(", ");
      return `export const ${k} = _runtime.docs<typeof _source.${k}>([${docsEntries}], [${metaEntries}])`;
    }
    const files = await getCollectionFiles(collection);
    if (collection.type === "doc" && collection.async) {
      return `export const ${k} = _runtimeAsync.doc<typeof _source.${k}>([${(await getAsyncEntries(collection, files)).join(", ")}], "${k}", _sourceConfig)`;
    }
    return `export const ${k} = _runtime.${collection.type}<typeof _source.${k}>([${(await getDocEntries(k, files)).join(", ")}]);`;
  });
  const resolvedDeclares = await Promise.all(declares);
  return [
    `// @ts-nocheck -- skip type checking`,
    ...lines,
    ...resolvedDeclares
  ].join("\n");
}
async function getCollectionFiles(collection) {
  const files = /* @__PURE__ */ new Map();
  const dirs = Array.isArray(collection.dir) ? collection.dir : [collection.dir];
  const patterns = getGlobPatterns(collection);
  await Promise.all(
    dirs.map(async (dir) => {
      const result = await (0, import_tinyglobby.glob)(patterns, {
        cwd: path5.resolve(dir)
      });
      for (const item of result) {
        if (!isFileSupported(item, collection)) continue;
        const fullPath = path5.join(dir, item);
        files.set(fullPath, {
          path: item,
          fullPath
        });
      }
    })
  );
  return Array.from(files.values());
}
function parseMetaEntry(file, content) {
  const extname2 = path5.extname(file);
  try {
    if (extname2 === ".json") return JSON.parse(content);
    if (extname2 === ".yaml") return (0, import_js_yaml2.load)(content);
  } catch (e) {
    throw new Error(`Failed to parse meta file: ${file}.`, {
      cause: e
    });
  }
  throw new Error(`Unknown meta file format: ${extname2}, in ${file}.`);
}
var path5, import_node_crypto, import_tinyglobby, import_js_yaml2;
var init_generate = __esm({
  "src/next/map/generate.ts"() {
    "use strict";
    path5 = __toESM(require("path"), 1);
    import_node_crypto = require("crypto");
    import_tinyglobby = require("tinyglobby");
    init_validation();
    init_file_cache();
    import_js_yaml2 = require("js-yaml");
    init_git_timestamp();
    init_fuma_matter();
    init_import_formatter();
    init_collections();
  }
});

// src/loaders/config/index.ts
function findConfigFile() {
  return import_node_path4.default.resolve("source.config.ts");
}
var import_node_path4;
var init_config = __esm({
  "src/loaders/config/index.ts"() {
    "use strict";
    import_node_path4 = __toESM(require("path"), 1);
  }
});

// src/next/map/watcher.ts
var watcher_exports = {};
__export(watcher_exports, {
  watcher: () => watcher
});
function watcher(configPath, config, ignored) {
  const watcher2 = new import_chokidar.FSWatcher({
    ignoreInitial: true,
    persistent: true,
    ignored
  });
  watcher2.add(configPath);
  for (const collection of config.collections.values()) {
    if (collection.type === "docs") {
      watcher2.add(collection.docs.dir);
      watcher2.add(collection.meta.dir);
    } else {
      watcher2.add(collection.dir);
    }
  }
  return watcher2;
}
var import_chokidar;
var init_watcher = __esm({
  "src/next/map/watcher.ts"() {
    "use strict";
    import_chokidar = require("chokidar");
  }
});

// src/next/map/index.ts
async function start(dev, configPath, outDir) {
  let configHash = await getConfigHash(configPath);
  let config = await loadConfig(configPath, outDir, configHash, true);
  const outPath = path7.resolve(outDir, `index.ts`);
  async function updateMapFile() {
    const start3 = performance.now();
    try {
      await fs3.writeFile(
        outPath,
        await generateJS(
          configPath,
          config,
          { relativeTo: outDir },
          configHash
        )
      );
    } catch (err) {
      if (err instanceof ValidationError) {
        console.error(err.toStringFormatted());
      } else {
        console.error(err);
      }
    }
    console.log(`[MDX] updated map file in ${performance.now() - start3}ms`);
  }
  await updateMapFile();
  if (dev) {
    const { watcher: watcher2 } = await Promise.resolve().then(() => (init_watcher(), watcher_exports));
    const instance = watcher2(configPath, config, [outPath]);
    instance.on("ready", () => {
      console.log("[MDX] started dev server");
    });
    instance.on("all", (event, file) => {
      if (typeof file !== "string") return;
      const absolutePath = path7.resolve(file);
      const onUpdate = async () => {
        const isConfigFile = absolutePath === configPath;
        if (isConfigFile) {
          configHash = await getConfigHash(configPath);
          config = await loadConfig(configPath, outDir, configHash, true);
        }
        if (event === "change") removeFileCache(absolutePath);
        await updateMapFile();
      };
      void onUpdate();
    });
    process.on("exit", () => {
      console.log("[MDX] closing dev server");
      void instance.close();
    });
  }
}
var path7, fs3;
var init_map = __esm({
  "src/next/map/index.ts"() {
    "use strict";
    path7 = __toESM(require("path"), 1);
    fs3 = __toESM(require("fs/promises"), 1);
    init_load();
    init_generate();
    init_file_cache();
    init_validation();
  }
});

// src/next/create.ts
function createMDX({
  configPath = findConfigFile(),
  outDir = ".source"
} = {}) {
  if (process.env._FUMADOCS_MDX !== "1") {
    process.env._FUMADOCS_MDX = "1";
    void start(process.env.NODE_ENV === "development", configPath, outDir);
  }
  return (nextConfig = {}) => {
    const mdxLoaderOptions = {
      configPath,
      outDir
    };
    const turbo = {
      ...nextConfig.experimental?.turbo,
      ...nextConfig.turbopack,
      rules: {
        ...nextConfig.experimental?.turbo?.rules,
        ...nextConfig.turbopack?.rules,
        "*.{md,mdx}": {
          loaders: [
            {
              loader: "fumadocs-mdx/loader-mdx",
              options: mdxLoaderOptions
            }
          ],
          as: "*.js"
        }
      }
    };
    const updated = {
      ...nextConfig,
      pageExtensions: nextConfig.pageExtensions ?? defaultPageExtensions,
      webpack: (config, options) => {
        config.resolve ||= {};
        config.module ||= {};
        config.module.rules ||= [];
        config.module.rules.push({
          test: /\.mdx?$/,
          use: [
            options.defaultLoaders.babel,
            {
              loader: "fumadocs-mdx/loader-mdx",
              options: mdxLoaderOptions
            }
          ]
        });
        config.plugins ||= [];
        return nextConfig.webpack?.(config, options) ?? config;
      }
    };
    if (isTurboExperimental) {
      updated.experimental = { ...updated.experimental, turbo };
    } else {
      updated.turbopack = turbo;
    }
    return updated;
  };
}
var import_node_fs, defaultPageExtensions, isTurboExperimental;
var init_create = __esm({
  "src/next/create.ts"() {
    "use strict";
    init_config();
    init_map();
    import_node_fs = require("fs");
    defaultPageExtensions = ["mdx", "md", "jsx", "js", "tsx", "ts"];
    try {
      const content = (0, import_node_fs.readFileSync)("./node_modules/next/package.json").toString();
      const version = JSON.parse(content).version;
      isTurboExperimental = version.startsWith("15.0.") || version.startsWith("15.1.") || version.startsWith("15.2.");
    } catch {
      isTurboExperimental = false;
    }
  }
});

// src/next/index.ts
var next_exports = {};
__export(next_exports, {
  createMDX: () => createMDX,
  postInstall: () => postInstall,
  start: () => start
});
async function postInstall(configPath = findConfigFile(), outDir = ".source") {
  const config = await loadConfig(configPath, outDir, void 0, true);
  const outPath = import_node_path5.default.join(outDir, "index.ts");
  await import_promises2.default.rm(outDir, { recursive: true });
  await import_promises2.default.mkdir(outDir, { recursive: true });
  const hash = await getConfigHash(configPath);
  await import_promises2.default.writeFile(
    outPath,
    await generateJS(configPath, config, { relativeTo: outDir }, hash)
  );
  console.log("[MDX] types generated");
}
var import_node_path5, import_promises2;
var init_next = __esm({
  "src/next/index.ts"() {
    "use strict";
    init_load();
    import_node_path5 = __toESM(require("path"), 1);
    import_promises2 = __toESM(require("fs/promises"), 1);
    init_generate();
    init_config();
    init_create();
  }
});

// src/vite/generate-glob.ts
function generateGlob(name, patterns, globOptions) {
  const options = {
    ...globOptions,
    query: {
      ...globOptions?.query,
      collection: name
    }
  };
  return `import.meta.glob(${JSON.stringify(mapGlobPatterns(patterns))}, ${JSON.stringify(options, null, 2)})`;
}
function mapGlobPatterns(patterns) {
  return patterns.map(enforceRelative);
}
function enforceRelative(file) {
  if (file.startsWith("./")) return file;
  if (file.startsWith("/")) return `.${file}`;
  return `./${file}`;
}
function getGlobBase(collection) {
  let dir = collection.dir;
  if (Array.isArray(dir)) {
    if (dir.length !== 1)
      throw new Error(
        `[Fumadocs MDX] Vite Plugin doesn't support multiple \`dir\` for a collection at the moment.`
      );
    dir = dir[0];
  }
  return enforceRelative(dir);
}
var init_generate_glob = __esm({
  "src/vite/generate-glob.ts"() {
    "use strict";
  }
});

// src/vite/generate.ts
function docs(name, collection) {
  const obj = [
    ident(`doc: ${doc(name, collection.docs)}`),
    ident(`meta: ${meta(name, collection.meta)}`)
  ].join(",\n");
  return `{
${obj}
}`;
}
function doc(name, collection) {
  const patterns = getGlobPatterns(collection);
  const base = getGlobBase(collection);
  const docGlob = generateGlob(name, patterns, {
    base
  });
  if (collection.async) {
    const headBlob = generateGlob(name, patterns, {
      query: {
        only: "frontmatter"
      },
      import: "frontmatter",
      base
    });
    return `create.docLazy("${name}", "${base}", ${headBlob}, ${docGlob})`;
  }
  return `create.doc("${name}", "${base}", ${docGlob})`;
}
function meta(name, collection) {
  const patterns = getGlobPatterns(collection);
  const base = getGlobBase(collection);
  return `create.meta("${name}", "${base}", ${generateGlob(name, patterns, {
    import: "default",
    base
  })})`;
}
function entry(configPath, config, outDir, jsExtension) {
  const lines = [
    '/// <reference types="vite/client" />',
    `import { fromConfig } from 'fumadocs-mdx/runtime/vite';`,
    `import type * as Config from '${toImportPath(configPath, {
      relativeTo: outDir,
      jsExtension
    })}';`,
    "",
    `export const create = fromConfig<typeof Config>();`
  ];
  for (const [name, collection] of config.collections.entries()) {
    let body;
    if (collection.type === "docs") {
      body = docs(name, collection);
    } else if (collection.type === "meta") {
      body = meta(name, collection);
    } else {
      body = doc(name, collection);
    }
    lines.push("");
    lines.push(`export const ${name} = ${body};`);
  }
  return lines.join("\n");
}
var init_generate2 = __esm({
  "src/vite/generate.ts"() {
    "use strict";
    init_import_formatter();
    init_generate_glob();
    init_collections();
  }
});

// src/vite/postinstall.ts
var postinstall_exports = {};
__export(postinstall_exports, {
  postInstall: () => postInstall2
});
async function postInstall2(configPath = findConfigFile(), outDir, addJsExtension = false) {
  const config = await loadConfig(configPath, "node_modules", void 0, true);
  const outFile = "source.generated.ts";
  if (outDir) {
    await import_promises3.default.mkdir(outDir, { recursive: true });
  }
  await import_promises3.default.writeFile(
    outDir ? import_node_path6.default.join(outDir, outFile) : outFile,
    entry(configPath, config, outDir ?? process.cwd(), addJsExtension)
  );
  console.log("[MDX] types generated");
}
var import_promises3, import_node_path6;
var init_postinstall = __esm({
  "src/vite/postinstall.ts"() {
    "use strict";
    init_load();
    import_promises3 = __toESM(require("fs/promises"), 1);
    import_node_path6 = __toESM(require("path"), 1);
    init_generate2();
    init_config();
  }
});

// src/bin.ts
var import_node_fs2 = require("fs");
async function start2() {
  const args = process.argv.slice(2);
  const isNext = (0, import_node_fs2.existsSync)("next.config.js") || (0, import_node_fs2.existsSync)("next.config.mjs") || (0, import_node_fs2.existsSync)("next.config.ts");
  if (isNext) {
    const { postInstall: postInstall3 } = await Promise.resolve().then(() => (init_next(), next_exports));
    await postInstall3(...args);
  } else {
    const { postInstall: postInstall3 } = await Promise.resolve().then(() => (init_postinstall(), postinstall_exports));
    await postInstall3(...args);
  }
}
void start2();
