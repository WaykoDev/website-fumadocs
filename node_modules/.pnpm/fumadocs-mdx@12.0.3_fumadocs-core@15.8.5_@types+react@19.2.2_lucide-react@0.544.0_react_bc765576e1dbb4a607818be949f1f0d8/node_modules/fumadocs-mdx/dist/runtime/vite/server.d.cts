import { B as BaseCreate, D as DocMap, M as MetaMap, L as LazyDocMap } from '../../browser-R0x9IPaQ.cjs';
export { C as ClientLoader, a as ClientLoaderOptions, b as CompiledMDXFile, c as createClientLoader, t as toClientRenderer } from '../../browser-R0x9IPaQ.cjs';
import { PageData, MetaData, Source } from 'fumadocs-core/source';
import { D as DocCollectionEntry, M as MetaCollectionEntry, A as AsyncDocCollectionEntry } from '../../shared-fFqiuWJC.cjs';
import '@mdx-js/mdx';
import 'fumadocs-core/mdx-plugins';
import 'fumadocs-core/server';
import 'react';
import 'mdx/types';
import '../../define-DJbJduHy.cjs';
import '@standard-schema/spec';
import 'unified';
import 'zod';

interface ServerCreate<Config> extends BaseCreate<Config> {
    sourceAsync: <DocOut extends PageData, MetaOut extends MetaData>(doc: DocMap<DocOut>, meta: MetaMap<MetaOut>) => Promise<Source<{
        pageData: DocCollectionEntry<DocOut>;
        metaData: MetaCollectionEntry<MetaOut>;
    }>>;
    sourceLazy: <DocOut extends PageData, MetaOut extends MetaData>(doc: LazyDocMap<DocOut>, meta: MetaMap<MetaOut>) => Promise<Source<{
        pageData: AsyncDocCollectionEntry<DocOut>;
        metaData: MetaCollectionEntry<MetaOut>;
    }>>;
}
declare function fromConfig<Config>(): ServerCreate<Config>;

export { DocMap, LazyDocMap, MetaMap, type ServerCreate, fromConfig };
