import {
  createClientLoader,
  fromConfigBase,
  toClientRenderer
} from "../../chunk-46UPKP5R.js";
import {
  missingProcessedMarkdown
} from "../../chunk-ZLCSVXCD.js";

// src/runtime/vite/server.ts
import * as path from "path";
import fs from "fs/promises";
function fromConfig() {
  const base = fromConfigBase();
  function fileInfo(file, base2) {
    return {
      path: file,
      fullPath: path.join(base2, file)
    };
  }
  function mapDocData(entry) {
    return {
      body: entry.default,
      toc: entry.toc,
      extractedReferences: entry.extractedReferences,
      structuredData: entry.structuredData,
      lastModified: entry.lastModified,
      _exports: entry
    };
  }
  function mapPageData(info, entry) {
    return {
      ...mapDocData(entry),
      info,
      async getText(type) {
        if (type === "raw") {
          return (await fs.readFile(info.fullPath)).toString();
        }
        if (typeof entry._markdown !== "string") missingProcessedMarkdown();
        return entry._markdown;
      },
      ...entry.frontmatter
    };
  }
  function mapPageDataLazy(info, head, content) {
    return {
      ...head,
      info,
      async load() {
        return mapDocData(await content());
      },
      async getText(type) {
        if (type === "raw") {
          return (await fs.readFile(info.fullPath)).toString();
        }
        const entry = await content();
        if (typeof entry._markdown !== "string") missingProcessedMarkdown();
        return entry._markdown;
      }
    };
  }
  function mapMetaData(info, content) {
    return {
      info,
      ...content
    };
  }
  return {
    ...base,
    async sourceAsync(doc, meta) {
      const virtualFiles = [
        ...Object.entries(doc).map(async ([file, content]) => {
          const info = fileInfo(file, content.base);
          return {
            type: "page",
            path: file,
            absolutePath: info.fullPath,
            data: mapPageData(info, await content())
          };
        }),
        ...Object.entries(meta).map(async ([file, content]) => {
          const info = fileInfo(file, content.base);
          return {
            type: "meta",
            path: info.path,
            absolutePath: info.fullPath,
            data: mapMetaData(info, await content())
          };
        })
      ];
      return {
        files: await Promise.all(virtualFiles)
      };
    },
    async sourceLazy(doc, meta) {
      const virtualFiles = [
        ...Object.entries(doc.head).map(async ([file, frontmatter]) => {
          const info = fileInfo(file, doc.base);
          return {
            type: "page",
            path: info.path,
            absolutePath: info.fullPath,
            data: mapPageDataLazy(info, await frontmatter(), doc.body[file])
          };
        }),
        ...Object.entries(meta).map(async ([file, content]) => {
          const info = fileInfo(file, content.base);
          return {
            type: "meta",
            path: info.path,
            absolutePath: info.fullPath,
            data: mapMetaData(info, await content())
          };
        })
      ];
      return {
        files: await Promise.all(virtualFiles)
      };
    }
  };
}
export {
  createClientLoader,
  fromConfig,
  toClientRenderer
};
