"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/runtime/vite/server.ts
var server_exports = {};
__export(server_exports, {
  createClientLoader: () => createClientLoader,
  fromConfig: () => fromConfig,
  toClientRenderer: () => toClientRenderer
});
module.exports = __toCommonJS(server_exports);

// src/runtime/vite/base.ts
function fromConfigBase() {
  function normalize(entries, base) {
    const out = {};
    for (const k in entries) {
      const mappedK = k.startsWith("./") ? k.slice(2) : k;
      if (base) Object.assign(entries[k], { base });
      out[mappedK] = entries[k];
    }
    return out;
  }
  return {
    doc(_, base, glob) {
      return normalize(glob, base);
    },
    meta(_, base, glob) {
      return normalize(glob, base);
    },
    docLazy(_, base, head, body) {
      return {
        base,
        head: normalize(head),
        body: normalize(body)
      };
    }
  };
}

// src/runtime/vite/server.ts
var path = __toESM(require("path"), 1);

// src/runtime/shared.ts
function missingProcessedMarkdown() {
  throw new Error(
    "getText('processed') requires `includeProcessedMarkdown` to be enabled in your collection config."
  );
}

// src/runtime/vite/server.ts
var import_promises = __toESM(require("fs/promises"), 1);

// src/runtime/vite/browser.ts
var import_react = require("react");
var loaderStore = /* @__PURE__ */ new Map();
function createClientLoader(files, options) {
  const { id = "", component } = options;
  let renderer;
  const store = loaderStore.get(id) ?? {
    preloaded: /* @__PURE__ */ new Map()
  };
  loaderStore.set(id, store);
  function getRenderer() {
    if (renderer) return renderer;
    renderer = {};
    for (const k in files) {
      const OnDemand = (0, import_react.lazy)(async () => {
        const loaded = await files[k]();
        return { default: (props) => component(loaded, props) };
      });
      renderer[k] = (props) => {
        const cached = store.preloaded.get(k);
        if (!cached) return (0, import_react.createElement)(OnDemand, props);
        return component(cached, props);
      };
    }
    return renderer;
  }
  return {
    async preload(path2) {
      const loaded = await files[path2]();
      store.preloaded.set(path2, loaded);
      return loaded;
    },
    getRenderer,
    getComponent(path2) {
      return getRenderer()[path2];
    }
  };
}
function toClientRenderer(files, component) {
  return createClientLoader(files, { component }).getRenderer();
}

// src/runtime/vite/server.ts
function fromConfig() {
  const base = fromConfigBase();
  function fileInfo(file, base2) {
    return {
      path: file,
      fullPath: path.join(base2, file)
    };
  }
  function mapDocData(entry) {
    return {
      body: entry.default,
      toc: entry.toc,
      extractedReferences: entry.extractedReferences,
      structuredData: entry.structuredData,
      lastModified: entry.lastModified,
      _exports: entry
    };
  }
  function mapPageData(info, entry) {
    return {
      ...mapDocData(entry),
      info,
      async getText(type) {
        if (type === "raw") {
          return (await import_promises.default.readFile(info.fullPath)).toString();
        }
        if (typeof entry._markdown !== "string") missingProcessedMarkdown();
        return entry._markdown;
      },
      ...entry.frontmatter
    };
  }
  function mapPageDataLazy(info, head, content) {
    return {
      ...head,
      info,
      async load() {
        return mapDocData(await content());
      },
      async getText(type) {
        if (type === "raw") {
          return (await import_promises.default.readFile(info.fullPath)).toString();
        }
        const entry = await content();
        if (typeof entry._markdown !== "string") missingProcessedMarkdown();
        return entry._markdown;
      }
    };
  }
  function mapMetaData(info, content) {
    return {
      info,
      ...content
    };
  }
  return {
    ...base,
    async sourceAsync(doc, meta) {
      const virtualFiles = [
        ...Object.entries(doc).map(async ([file, content]) => {
          const info = fileInfo(file, content.base);
          return {
            type: "page",
            path: file,
            absolutePath: info.fullPath,
            data: mapPageData(info, await content())
          };
        }),
        ...Object.entries(meta).map(async ([file, content]) => {
          const info = fileInfo(file, content.base);
          return {
            type: "meta",
            path: info.path,
            absolutePath: info.fullPath,
            data: mapMetaData(info, await content())
          };
        })
      ];
      return {
        files: await Promise.all(virtualFiles)
      };
    },
    async sourceLazy(doc, meta) {
      const virtualFiles = [
        ...Object.entries(doc.head).map(async ([file, frontmatter]) => {
          const info = fileInfo(file, doc.base);
          return {
            type: "page",
            path: info.path,
            absolutePath: info.fullPath,
            data: mapPageDataLazy(info, await frontmatter(), doc.body[file])
          };
        }),
        ...Object.entries(meta).map(async ([file, content]) => {
          const info = fileInfo(file, content.base);
          return {
            type: "meta",
            path: info.path,
            absolutePath: info.fullPath,
            data: mapMetaData(info, await content())
          };
        })
      ];
      return {
        files: await Promise.all(virtualFiles)
      };
    }
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createClientLoader,
  fromConfig,
  toClientRenderer
});
